import fs from "fs-extra";
import path from "path";
import { randomUUID } from "crypto";
import chalk from "chalk";

export default async function link(opts: { name?: string }) {
  try {
    const cwd = process.cwd();

    // Global config from init (~/.a2a/config.json)
    const homeDir = process.env.HOME || process.env.USERPROFILE!;
    const globalConfigPath = path.join(homeDir, ".a2a", "config.json");

    if (!(await fs.pathExists(globalConfigPath))) {
      console.error(chalk.red("❌ Global A2A config not found. Run `a2a init` first."));
      process.exit(1);
    }

    const globalConfig = await fs.readJson(globalConfigPath);

    // Per-project agent config
    const agentConfigPath = path.join(cwd, ".a2a.config.json");
    const bootstrapPath = path.join(cwd, "a2a.bootstrap.js");

    const config = {
      agentId: randomUUID(),
      agentName: opts.name || path.basename(cwd),
      endpoint: globalConfig.collector.endpoint,
      token: globalConfig.collector.token
    };

    // Write .a2a.config.json
    await fs.writeJson(agentConfigPath, config, { spaces: 2 });

    // Generate bootstrap file
    const bootstrapContent = `
// Auto-generated by A2A CLI
import { NodeSDK } from "@opentelemetry/sdk-node";
import { OTLPTraceExporter } from "@opentelemetry/exporter-trace-otlp-http";

const exporter = new OTLPTraceExporter({
  url: "${config.endpoint}",
  headers: { Authorization: "Bearer ${config.token}" }
});

const sdk = new NodeSDK({ traceExporter: exporter });
sdk.start().then(() => {
  console.log("📡 A2A telemetry started for agent: ${config.agentName}");
});
`;

    await fs.writeFile(bootstrapPath, bootstrapContent, "utf8");

    console.log(chalk.green(`✅ Linked agent "${config.agentName}"`));
    console.log(chalk.gray(`Created .a2a.config.json and a2a.bootstrap.js in ${cwd}`));
  } catch (err) {
    console.error(chalk.red("❌ Failed to link agent:"), err);
  }
}
